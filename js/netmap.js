// Generated by CoffeeScript 1.6.2
(function() {
  var Netmap, dragend, dragmove, dragstart, tick;

  tick = function() {
    window.entities.attr("transform", function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
    window.rels.attr("transform", function(d) {
      return "translate(" + (d.source.x + d.target.x) / 2 + "," + (d.source.y + d.target.y) / 2 + ")";
    });
    window.svg.selectAll(".line").attr("x1", function(d) {
      return d.source.x - (d.source.x + d.target.x) / 2;
    }).attr("y1", function(d) {
      return d.source.y - (d.source.y + d.target.y) / 2;
    }).attr("x2", function(d) {
      return d.target.x - (d.source.x + d.target.x) / 2;
    }).attr("y2", function(d) {
      return d.target.y - (d.source.y + d.target.y) / 2;
    });
    window.svg.selectAll(".rel text").attr("transform", function(d) {
      var angle, x_delta, y_delta;

      x_delta = d.target.x - d.source.x;
      y_delta = d.target.y - d.source.y;
      angle = Math.atan2(y_delta, x_delta) * 180 / Math.PI;
      if (d.source.x >= d.target.x) {
        angle += 180;
      }
      return "rotate(" + angle + ")";
    });
    return console.log(window.force.alpha());
  };

  dragstart = function(d, i) {
    if (force_enabled) {
      return force.stop();
    }
  };

  dragmove = function(d, i) {
    d.px += d3.event.dx;
    d.py += d3.event.dy;
    d.x += d3.event.dx;
    d.y += d3.event.dy;
    return tick();
  };

  dragend = function(d, i) {
    d.fixed = true;
    tick();
    if (force_enabled) {
      return force.resume();
    }
  };

  Netmap = (function() {
    function Netmap(width, height, parent_selector) {
      this.width = width;
      this.height = height;
      this.init_svg(parent_selector);
      window.force_enabled = this.force_enabled = false;
      this.entity_background_opacity = 0.6;
      this.entity_background_color = "#fff";
      this.entity_background_corner_radius = 5;
    }

    Netmap.prototype.set_data = function(data, center_entity_id) {
      if (center_entity_id == null) {
        center_entity_id = nil;
      }
      this.data = data;
      if (center_entity_id != null) {
        return this.set_center_entity_id(center_entity_id);
      }
    };

    Netmap.prototype.get_data = function() {
      return this.data;
    };

    Netmap.prototype.set_center_entity_id = function(id) {
      var entity, _i, _len, _ref, _results;

      this.center_entity_id = id;
      _ref = this.data["entities"];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        entity = _ref[_i];
        if (entity.id === this.center_entity_id) {
          entity.fixed = true;
          entity.x = this.width / 2;
          _results.push(entity.y = this.height / 2);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Netmap.prototype.init_svg = function(parent_selector) {
      this.svg = d3.select(parent_selector).append("svg").attr("id", "svg").attr("width", this.width).attr("height", this.height);
      return window.svg = this.svg;
    };

    Netmap.prototype.wheel = function(center_entity_id) {
      var angle, entity, i, _i, _len, _ref;

      if (center_entity_id == null) {
        center_entity_id = null;
      }
      if (this.center_entity_id != null) {
        center_entity_id = this.center_entity_id;
      }
      if (center_entity_id == null) {
        return;
      }
      _ref = this.data["entities"];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        entity = _ref[i];
        if (entity.id === center_entity_id) {
          this.data["entities"][i].x = this.width / 2;
          this.data["entities"][i].y = this.height / 2;
        } else {
          angle = (2 * Math.PI / (this.data["entities"].length - 1)) * i;
          this.data["entities"][i].x = this.width / 2 + 200 * Math.cos(angle);
          this.data["entities"][i].y = this.height / 2 + 200 * Math.sin(angle);
        }
      }
      this.use_force();
      tick();
      return this.deny_force();
    };

    Netmap.prototype.use_force = function() {
      window.force_enabled = this.force_enabled = true;
      this.force = d3.layout.force().gravity(.3).distance(150).charge(-5000).friction(0.7).size([this.width, this.height]).nodes(this.data["entities"]).links(this.data["rels"]).on("tick", tick).start();
      return window.force = this.force;
    };

    Netmap.prototype.one_time_force = function() {
      this.use_force();
      this.force.alpha(0.01);
      return this.force.on("end", function() {
        return window.force_enabled = this.force_enabled = false;
      });
    };

    Netmap.prototype.deny_force = function() {
      window.force_enabled = this.force_enabled = false;
      return this.force.stop();
    };

    Netmap.prototype.n_force_ticks = function(n) {
      var _i;

      this.use_force();
      for (_i = 1; 1 <= n ? _i <= n : _i >= n; 1 <= n ? _i++ : _i--) {
        this.force.tick();
      }
      return this.deny_force();
    };

    Netmap.prototype.build = function() {
      this.build_rels();
      return this.build_entities();
    };

    Netmap.prototype.build_rels = function() {
      this.rels = this.svg.selectAll(".rel").data(this.data["rels"]).enter().append("g").attr("class", "rel");
      window.rels = this.rels;
      this.rels.append("line").attr("class", "line").attr("opacity", 0.6).style("stroke-width", function(d) {
        return Math.sqrt(d.value) * 12;
      });
      return this.rels.append("a").attr("xrel:href", function(d) {
        return d.url;
      }).append("text").attr("dy", function(d) {
        return Math.sqrt(d.value) * 10 / 2 - 1;
      }).attr("text-anchor", "middle").text(function(d) {
        return d.label;
      });
    };

    Netmap.prototype.build_entities = function() {
      var entity_drag, has_image;

      entity_drag = d3.behavior.drag().on("dragstart", dragstart).on("drag", dragmove).on("dragend", dragend);
      this.entities = this.svg.selectAll(".entity").data(this.data["entities"]).enter().append("g").attr("class", "entity").call(entity_drag);
      window.entities = this.entities;
      has_image = function(d) {
        return d.image.indexOf("anon") === -1;
      };
      this.entities.append("rect").attr("fill", this.entity_background_color).attr("opacity", 1).attr("rx", this.entity_background_corner_radius).attr("ry", this.entity_background_corner_radius).attr("width", function(d) {
        if (has_image(d)) {
          return 58;
        } else {
          return 43;
        }
      }).attr("height", function(d) {
        if (has_image(d)) {
          return 58;
        } else {
          return 43;
        }
      }).attr("x", function(d) {
        if (has_image(d)) {
          return -29;
        } else {
          return -21;
        }
      }).attr("y", function(d) {
        if (has_image(d)) {
          return -29;
        } else {
          return -29;
        }
      }).attr("stroke", "#f8f8f8").attr("stroke-width", 1);
      this.entities.append("image").attr("class", "image").attr("opacity", function(d) {
        if (has_image(d)) {
          return 1;
        } else {
          return 0.5;
        }
      }).attr("xlink:href", function(d) {
        return d.image;
      }).attr("x", function(d) {
        if (has_image(d)) {
          return -25;
        } else {
          return -17;
        }
      }).attr("y", function(d) {
        if (has_image(d)) {
          return -25;
        } else {
          return -25;
        }
      }).attr("width", function(d) {
        if (has_image(d)) {
          return 50;
        } else {
          return 35;
        }
      }).attr("height", function(d) {
        if (has_image(d)) {
          return 50;
        } else {
          return 35;
        }
      });
      this.entity_links = this.entities.append("a").attr("xlink:href", function(d) {
        return d.url;
      }).attr("title", function(d) {
        return d.description;
      });
      this.entity_links.append("text").attr("dx", 0).attr("dy", function(d) {
        if (has_image(d)) {
          return 40;
        } else {
          return 25;
        }
      }).attr("text-anchor", "middle").text(function(d) {
        return d.name.replace(/^(.{8,}[\s-]+).+$/, "$1").trim();
      });
      this.entity_links.append("text").attr("dx", 0).attr("dy", function(d) {
        if (has_image(d)) {
          return 55;
        } else {
          return 40;
        }
      }).attr("text-anchor", "middle").text(function(d) {
        var second_part;

        second_part = d.name.replace(/^.{8,}[\s-]+(.+)$/, "$1");
        if (d.name === second_part) {
          return "";
        } else {
          return second_part;
        }
      });
      this.entities.filter(function(d) {
        return d.name.match(/^(.{8,})[\s-]+.+$/) !== null;
      }).insert("rect", ":first-child").attr("fill", this.entity_background_color).attr("opacity", this.entity_background_opacity).attr("rx", this.entity_background_corner_radius).attr("ry", this.entity_background_corner_radius).attr("x", function(d) {
        return -$(this.parentNode).find("text:nth-child(2)").width() / 2 - 3;
      }).attr("y", function(d) {
        var extra_offset, image_offset, text_offset;

        image_offset = $(this.parentNode).find("image").attr("height") / 2;
        text_offset = $(this.parentNode).find("text").height();
        extra_offset = has_image(d) ? 2 : -5;
        return image_offset + text_offset + extra_offset;
      }).attr("width", function(d) {
        return $(this.parentNode).find("text:nth-child(2)").width() + 6;
      }).attr("height", function(d) {
        return $(this.parentNode).find("text:nth-child(2)").height() + 4;
      });
      return this.entities.insert("rect", ":first-child").attr("fill", this.entity_background_color).attr("opacity", this.entity_background_opacity).attr("rx", this.entity_background_corner_radius).attr("ry", this.entity_background_corner_radius).attr("x", function(d) {
        return -$(this.parentNode).find("text").width() / 2 - 3;
      }).attr("y", function(d) {
        var extra_offset, image_offset;

        image_offset = $(this.parentNode).find("image").attr("height") / 2;
        extra_offset = has_image(d) ? 1 : -6;
        return image_offset + extra_offset;
      }).attr("width", function(d) {
        return $(this.parentNode).find("text").width() + 6;
      }).attr("height", function(d) {
        return $(this.parentNode).find("text").height() + 4;
      });
    };

    return Netmap;

  })();

  if (typeof module !== "undefined" && module.exports) {
    exports.Netmap = Netmap;
  } else {
    window.Netmap = Netmap;
  }

}).call(this);
